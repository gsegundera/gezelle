/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ejsfamilyhome;


import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.design.JRDesignQuery;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import net.sf.jasperreports.swing.JRViewer;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFPrintSetup;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.hssf.usermodel.HeaderFooter;
import org.apache.poi.hssf.util.CellRangeAddress;
import org.apache.poi.hssf.util.HSSFColor;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.CreationHelper;
import org.apache.poi.ss.usermodel.Footer;
import org.apache.poi.ss.usermodel.Header;
import org.apache.poi.ss.usermodel.Sheet;


/**
 *
 * @author Gezelle
 */
public class MedicationList extends javax.swing.JFrame {

    /**
     * Creates new form MedicationList
     */
    
    
    public MedicationList() {
        initComponents();
         myComboBox();
    }
    
Connection con = MyDBConnection.getConnection();
static String CLIENT_KEY;
static String selectedClient;
static String[] name;
static String lastName;
static String firstName;
static java.sql.Date dob;
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Medication List");

        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Choose Client Name:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(334, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jTable1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Medication Brand Name", "Dose", "Frequency", "RX Number", "RX Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(140);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(60);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(200);
        }

        jButton1.setText("Print Current Medication");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Back");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Print MAR");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(205, 205, 205)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(38, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 931, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
       
         ResultSet rs=null;
         PreparedStatement stmt=null;
         try {           
           
            selectedClient = jComboBox1.getSelectedItem().toString();
            System.out.println(selectedClient);
           name = selectedClient.split("\\,");
           lastName = name[0];
           firstName = name[1];
           
          
            
           
         stmt= con.prepareStatement("select MedicationBrandName, MedicationDose, Frequency, RXNumber, RXDate from medication join client "
                 + "on client.ClientKey= medication.Client_ClientKey where LastName='" + lastName + "' and FirstName='" + firstName.trim() + "' order by MedicationBrandName" );
            rs = stmt.executeQuery();
            
            
          
            jTable1.getTableHeader().resizeAndRepaint();
            
            // Removing Previous Data
            while (jTable1.getRowCount() > 0) {
                ((DefaultTableModel) jTable1.getModel()).removeRow(0);
            }
            
            
            //Creating Object []rowData for jTable's Table Model
            
            int columns = rs.getMetaData().getColumnCount();
            while (rs.next()) {
                Object[] row = new Object[columns];
                for (int i = 1; i <= columns; i++) {
                    row[i - 1] = rs.getObject(i); // 1
                }
                ((DefaultTableModel) jTable1.getModel()).insertRow(rs.getRow() - 1,row);
            } 
            
        } 
          
          catch (HeadlessException | SQLException e) {
            System.err.println(e);
            
        }
        
         
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        MainWindow m = new MainWindow();
        m.setVisible(true);
        setVisible(false);
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
       try{
           InputStream is = this.getClass().getClassLoader().getResourceAsStream("report23.jrxml");
            JasperDesign jasperDesign = JRXmlLoader.load(is);
            String sql = "SELECT\n" +
"     client.`LastName` AS LastName,\n" +
"     client.`FirstName` AS FirstName,\n" +
"     client.`DateOfBirth` AS DateOfBirth,\n" +
"     client.`Weight` AS Weight,\n" +
"     client.`Height` AS Height,\n" +
"     medication.`MedicationBrandName` AS MedicationBrandName,\n" +
"     medication.`MedicationDose` AS MedicationDose,\n" +
"     medication.`Frequency` AS Frequency,\n" +
"     medication.`RXNumber` AS RXNumber,\n" +
"     medication.`RXDate` AS RXDate\n" +
"FROM\n" +
"     `client` client INNER JOIN `medication` medication ON client.`ClientKey` = medication.`Client_ClientKey`"
                    + " where LastName='" + lastName + "' and FirstName='" + firstName.trim() + "' order by MedicationBrandName";
            JRDesignQuery newQuery = new JRDesignQuery();
            newQuery.setText(sql);
            jasperDesign.setQuery(newQuery);
            JasperReport jasperR = JasperCompileManager.compileReport(jasperDesign);
           
            JasperPrint print = JasperFillManager.fillReport(jasperR, null, con);
            JRViewer view = new JRViewer(print);
           // JasperViewer.viewReport(print);
            JFrame jf = new JFrame();
            jf.getContentPane().add(view);
              jf.setVisible(true);
            jf.setSize(new Dimension(800,600));
            jf.setLocation(300,100);
            jf.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            
        } catch(JRException | HeadlessException e) {
            JOptionPane.showMessageDialog(null, e);
        }
    
    }//GEN-LAST:event_jButton1ActionPerformed

    private void lineMarker(Cell cell, HSSFRow row, CellStyle style) {
         for(int i=1; i<33; i++) {
                              cell = row.createCell((short) i);
                                cell.setCellStyle(style); 
                         }
    }
    
    private void repeatingBottom(HSSFSheet sheet, Cell cell, CellStyle styleA,CellStyle styleB, int start, int end, HSSFRow row102,HSSFRow row103,HSSFRow row104) {
    
                              
                        cell = row102.createCell((short)0);
                        cell.setCellValue("Name");
                        cell.setCellStyle(styleB);
                       
                       cell = row102.createCell((short)1);
                       cell.setCellValue("initial");
                       cell.setCellStyle(styleB);
                       
                       cell = row102.createCell((short)2);
                        cell.setCellValue("Name"); 
                        cell.setCellStyle(styleB);
                        
                       cell = row102.createCell((short)10);
                       cell.setCellValue("initial");
                       cell.setCellStyle(styleB);
                       
                        cell = row102.createCell((short)12);
                        cell.setCellValue("Name");  
                        cell.setCellStyle(styleB);
                        
                       cell = row102.createCell((short)20);
                       cell.setCellValue("initial");
                       cell.setCellStyle(styleB);
                       
                        cell = row102.createCell((short)22);
                        cell.setCellValue("Name");  
                        cell.setCellStyle(styleB);
                       cell = row102.createCell((short)30);
                       cell.setCellValue("initial");
                       cell.setCellStyle(styleB);
                       
                       for(int i=0;i<33;i++){
                       cell = row103.createCell((short)i); 
                       cell.setCellStyle(styleA);
                       
                        cell = row104.createCell((short)i); 
                        cell.setCellStyle(styleA);
                      
                       }
                       
                       for(int i=start; i<end; i++) {
                        sheet.addMergedRegion(new CellRangeAddress(i,i, 2, 9 ));                        
                        sheet.addMergedRegion(new CellRangeAddress(i,i,10,11));
                        sheet.addMergedRegion(new CellRangeAddress(i,i,12,19));
                         sheet.addMergedRegion(new CellRangeAddress(i,i,20,21));
                         sheet.addMergedRegion(new CellRangeAddress(i,i,22,29));                       
                         sheet.addMergedRegion(new CellRangeAddress(i,i,30,32));
                        
                       }
                        }
    
    
    
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
         try {
                       
                        PreparedStatement psmnt = null;
                        Statement st = con.createStatement();
                        String query = "";
                        query = "select MedicationBrandName, MedicationDose, Frequency, RXNumber, RXDate, LastName, FirstName  from client\n" +
"join medication on client.ClientKey = medication.Client_ClientKey \n" +
" where LastName='" + lastName + "' and FirstName='" + firstName.trim() + "' order by MedicationBrandName";                      
                       Cell cell;
                        ResultSet rs = st.executeQuery(query);             
                        HSSFWorkbook wb = new HSSFWorkbook();
                        HSSFSheet sheet = wb.createSheet("Excel Sheet");
                        sheet.getPrintSetup().setLandscape(true);
                        sheet.getPrintSetup().setPaperSize(HSSFPrintSetup.LETTER_PAPERSIZE); 
                        sheet.setMargin(Sheet.LeftMargin, 0.3);
                         sheet.setMargin(Sheet.RightMargin, 0.3);
                         sheet.setMargin(Sheet.TopMargin, 1.0);
                          sheet.setMargin(Sheet.BottomMargin, 1.0);
                         
                         sheet.setRepeatingRows(CellRangeAddress.valueOf("1:2"));
                        
                         
                          
                   int index = 2;         
                          
                         
                                              
                         HSSFCellStyle txtStyle = (HSSFCellStyle)wb.createCellStyle();
                         HSSFFont txtFont = (HSSFFont)wb.createFont();
                         txtFont.setFontHeightInPoints((short)8);
                         txtStyle.setFont(txtFont);
                          txtStyle.setBorderBottom(HSSFCellStyle.BORDER_THIN);
                         txtStyle.setBorderTop(HSSFCellStyle.BORDER_THIN);
                          txtStyle.setBorderLeft(HSSFCellStyle.BORDER_THIN);
                        txtStyle.setBorderRight(HSSFCellStyle.BORDER_THIN);
                        
                         HSSFCellStyle styleA = wb.createCellStyle();
                        styleA.setAlignment(HSSFCellStyle.ALIGN_CENTER);
                        styleA.setVerticalAlignment( 
                        HSSFCellStyle.VERTICAL_CENTER);
                        styleA.setBorderBottom(HSSFCellStyle.BORDER_THIN);
                         styleA.setBorderTop(HSSFCellStyle.BORDER_THIN);
                          styleA.setBorderLeft(HSSFCellStyle.BORDER_THIN);
                        styleA.setBorderRight(HSSFCellStyle.BORDER_THIN);
                        
                         HSSFCellStyle styleB = wb.createCellStyle();
                        styleB.setAlignment(HSSFCellStyle.ALIGN_CENTER);
                        styleB.setVerticalAlignment( 
                        HSSFCellStyle.VERTICAL_CENTER);
                        styleB.setBorderBottom(HSSFCellStyle.BORDER_THIN);
                         styleB.setBorderTop(HSSFCellStyle.BORDER_THIN);
                          styleB.setBorderLeft(HSSFCellStyle.BORDER_THIN);
                        styleB.setBorderRight(HSSFCellStyle.BORDER_THIN);
                         styleB.setFillForegroundColor(HSSFColor.GREY_40_PERCENT.index);
                        styleB.setFillPattern(HSSFCellStyle.SOLID_FOREGROUND);                      
                                                                                             
                        HSSFRow row1 = sheet.createRow((short)1);
                        cell = row1.createCell((short)0);
                        cell.setCellValue("ROUTINE MEDICATIONS");
                       cell.setCellStyle(txtStyle);
                        cell = row1.createCell((short)1);
                        cell.setCellValue("HOUR");
                        cell.setCellStyle(txtStyle);
                        sheet.setColumnWidth(1, 1200);                        
                   
                        
                         HSSFRow row32 = sheet.createRow((short)32);
                         HSSFRow row33 = sheet.createRow((short)33);
                         HSSFRow row34 = sheet.createRow((short)34);
                         
                        repeatingBottom(sheet, cell, styleA, styleB, 32, 35, row32,row33,row34);
                        
                        dateOfBirth();
                        
                        //Add Header and Footer
     Header header = sheet.getHeader();
    header.setLeft("Resident: " + lastName + " " + firstName);
    header.setCenter("Date of Birth: " + dob);
    
   Footer foot = sheet.getFooter();
   foot.setRight("Date Printed: " +  HeaderFooter.date());
   foot.setLeft("page " + HeaderFooter.page() + " of " + HeaderFooter.numPages());
   
                        
                        for(int i=2; i<33; i++) {
                            cell = row1.createCell((short) i);
                              cell.setCellValue(i-1);  
                                cell.setCellStyle(txtStyle);
                              sheet.setColumnWidth(i, 700);
                         }                 
                      
                          CreationHelper createHelper = wb.getCreationHelper();
                         
                     
                          CellStyle style2 = wb.createCellStyle();
                         style2.setBorderLeft(HSSFCellStyle.BORDER_THIN);
                         style2.setFont(txtFont);
                         CellStyle style3 = wb.createCellStyle();
                         style3.setBorderRight(HSSFCellStyle.BORDER_THIN);
                         style3.setFont(txtFont);
                         CellStyle style4 = wb.createCellStyle();
                         style4.setBorderTop(HSSFCellStyle.BORDER_THIN);
                          style4.setFont(txtFont);
                          CellStyle style5 = wb.createCellStyle();
                         style5.setBorderLeft(HSSFCellStyle.BORDER_THIN);
                          style5.setBorderTop(HSSFCellStyle.BORDER_THIN);
                           style5.setFont(txtFont);
                           CellStyle style6 = wb.createCellStyle();
                         style6.setBorderRight(HSSFCellStyle.BORDER_THIN);
                                  style6.setBorderTop(HSSFCellStyle.BORDER_THIN);
                                   style6.setFont(txtFont);
                                  CellStyle style7 = wb.createCellStyle();
                         style7.setBorderRight(HSSFCellStyle.BORDER_THIN);
                         style7.setBorderBottom(HSSFCellStyle.BORDER_THIN);
                          style7.setFont(txtFont);
                         CellStyle style8 = wb.createCellStyle();
                         style8.setBorderLeft(HSSFCellStyle.BORDER_THIN);
                         style8.setBorderBottom(HSSFCellStyle.BORDER_THIN);
                         style8.setDataFormat(createHelper.createDataFormat().getFormat("m/d/yy"));
                         style8.setFont(txtFont);
                          CellStyle style9 = wb.createCellStyle();
                         style9.setBorderLeft(HSSFCellStyle.BORDER_THIN);
                         style9.setBorderBottom(HSSFCellStyle.BORDER_THIN);
                         style9.setBorderRight(HSSFCellStyle.BORDER_THIN);
                         style9.setBorderTop(HSSFCellStyle.BORDER_THIN);
                                   style9.setFont(txtFont);
                       
                         
                             
                             
                             
                        while (rs.next()) {
                              HSSFRow row = sheet.createRow((short) index);
                              HSSFRow row2 = sheet.createRow((short) index + 1);
                               HSSFRow row3 = sheet.createRow((short) index + 2);
                                HSSFRow row4 = sheet.createRow((short) index + 3);
                                HSSFRow row5 = sheet.createRow((short) index + 4);
                                
                                
                               cell = row.createCell((short) 0);
                                cell.setCellStyle(style5);                                
                                cell.setCellValue(rs.getString(1));
                                 
                                cell = row.createCell((short)1);
                                cell.setCellStyle(style6);
                                
                       
                                
                                lineMarker(cell, row, style9);
                              
                                
                                
                                cell = row2.createCell((short) 0);
                                cell.setCellValue(rs.getString(2));
                                 cell.setCellStyle(style2);
                                 
                                  cell = row2.createCell((short)1);
                                cell.setCellStyle(style3);
                     
                                
                                 lineMarker(cell, row2, style9);
                                
                                
                                
                                  cell = row3.createCell((short) 0);
                                cell.setCellValue(rs.getString(3));
                                cell.setCellStyle(style2);
                                 cell = row3.createCell((short)1);
                                cell.setCellStyle(style3);
                                
                    
                                
                                 lineMarker(cell, row3, style9);
                                
                                 cell = row4.createCell((short) 0);
                                cell.setCellValue(rs.getString(4));
                                cell.setCellStyle(style2);
                                
                               
                                  lineMarker(cell, row4, style9); 
                                  String date1 = rs.getString(5);
                                  System.out.println(date1);
                            // java.util.Date date=null;
                              cell = row5.createCell((short) 0); 
                              cell.setCellStyle(style8);
                                DateFormat format = new SimpleDateFormat("yyyy-MM-dd");
                                if(date1 !=(null)) {
                                   java.util.Date  date =  format.parse(date1);
                                    cell.setCellValue(date);
                                }
                                else  {  
                            cell.setCellValue(date1);
                                }
                                                             
                             
                                
                                
                              
                             
                              
                                
                                 cell = row5.createCell((short)1);
                                  
                                cell.setCellStyle(style7);
                                 lineMarker(cell, row5, style9);
                             
                                 index = index+5;
                                 
                           if((index==32)||(index==67)||(index==102)||(index==137)||(index==172)|| (index==207) ){
                              index = index+5;
                           
                           }                  
                            
                             
                                 
                       if(index > 36) {
                     
                         HSSFRow row67 = sheet.createRow((short)67);
                         HSSFRow row68 = sheet.createRow((short)68);
                         HSSFRow row69 = sheet.createRow((short)69);
                        repeatingBottom(sheet, cell, styleA, styleB, 67, 70, row67,row68,row69);
                        
                        }
                              
                if(index > 71) {
                             HSSFRow row102 = sheet.createRow((short)102);
                           HSSFRow row103 = sheet.createRow((short)103);
                              HSSFRow row104 = sheet.createRow((short)104);
                              
                   repeatingBottom(sheet, cell, styleA, styleB, 102, 105, row102,row103,row104);
                 
                        }
                       
                              
                               sheet.autoSizeColumn(0);
                              
                        }

                           System.out.println("Writing Data");
                              
                      
                        FileOutputStream fileOut = new FileOutputStream("C:/Users/Gezelle/Documents/MAR/" +lastName + "_" +firstName + ".xls");
                        wb.write(fileOut);
                        fileOut.close();
                        System.out.println("Data is saved in excel file.");
                        rs.close();
                         try {
            Desktop.getDesktop().open(new File("C:/Users/Gezelle/Documents/MAR/" +lastName + "_" +firstName + ".xls"));
        } 
            catch (IOException e) {
                 System.err.println(e);
        }
                        
    
                } catch (SQLException | IOException e) {
                    System.err.println(e);
                } catch (ParseException ex) { 
            Logger.getLogger(MedicationList.class.getName()).log(Level.SEVERE, null, ex);
        } 
        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void dateOfBirth(){
            try {
           
            ResultSet rs=null;
            PreparedStatement stmt=null;         
            
            stmt= con.prepareStatement("select ClientKey, DateOfBirth   from client  where LastName='" + lastName.trim() + "' and FirstName='" + firstName.trim() + "'");
            rs = stmt.executeQuery();          
           
           
            while (rs.next()) {
                    dob = rs.getDate(2);
                          
        } 
          
        }
          catch (HeadlessException | SQLException e) {
            System.err.println(e);
           
        }
      }
    
      private void myComboBox(){
           ResultSet rs=null;
            PreparedStatement stmt=null;
          
         try {
           
                    
            
            stmt= con.prepareStatement("select LastName, FirstName,ClientKey  from client order by LastName");
            rs = stmt.executeQuery();            
           
           
            while (rs.next()) {
                String st1 = rs.getString(1);
                String st2 = rs.getString(2);
               
               jComboBox1.addItem(st1 + ", " + st2);     
              
               
            
        } 
            
          //  jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(doc));
        }
          catch (HeadlessException | SQLException e) {
            System.err.println(e);
            //System.exit(1);
        }
         
         
         
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MedicationList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MedicationList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MedicationList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MedicationList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MedicationList().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
